'''Train a simple deep CNN on the CIFAR10 small images dataset.
GPU run command:
'''

from __future__ import print_function
from keras.datasets import cifar10
import numpy as np
import scipy.ndimage as si
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils
from IPython import embed
import pandas as pd
import h5py
from keras.regularizers import l2, activity_l2

batch_size = 32
nb_classes = 10
nb_epoch = 30
data_augmentation = False

# input image dimensions
img_rows, img_cols = 32, 32
# the CIFAR10 images are RGB
img_channels = 3

X_train = []
for i in range(1,50001):
  file = "../train/"+str(i)+".png"
  x = si.imread(file)
  X_train.append(x.T)
  if i % 1000 == 0:
    print("Reading data for index = ", i)

#embed()
X_train = np.asarray(X_train)
#X_train = X_train.astype(float)
#X_train /= 255
X_test = X_train[49000:50000]
X_train = X_train[0:49000]

# Reading the data now
df = pd.read_csv('../trainLabels.csv')
#s = pd.Series(['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck'])
class_labels = {'airplane':0,'automobile':1,'bird':2,'cat':3,'deer':4,'dog':5,'frog':6,'horse':7,'ship':8,'truck':9}
class_inverted = dict((v, k) for k, v in class_labels.iteritems())


df["value"] = [class_labels[row.label] for idx,row in df.iterrows()]
y_raw = np.asarray(df["value"])

#this is how to get values back
#a["label2"] = [class_inverted[row.value] for idx,row in a.iterrows()]

#labels,levels = pd.factorize(df['label'])
#y_raw = labels[0:50000]


# the data, shuffled and spt between train and test sets
#(X_train, y_train), (X_test, y_test) = cifar10.load_data()
#embed()
print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
Y_train = np_utils.to_categorical(y_raw, nb_classes)
#Y_test = np_utils.to_categorical(y_te, nb_classes)

Y_test = Y_train[49000:50000]
Y_train = Y_train[0:49000]

model = Sequential()
model.add(Convolution2D(64, 3, 3, border_mode='same',W_regularizer=l2(0.0001),
                        input_shape=(img_channels, img_rows, img_cols)))
model.add(Activation('relu'))
model.add(Convolution2D(128, 3, 3,W_regularizer=l2(0.0001)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Convolution2D(128, 3, 3, border_mode='same', W_regularizer=l2(0.0001)))
model.add(Activation('relu'))
model.add(Convolution2D(128, 3, 3, W_regularizer=l2(0.0001)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512, W_regularizer=l2(0.0001)))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(nb_classes, W_regularizer=l2(0.0001)))
model.add(Activation('softmax'))
# let's train the model using SGD + momentum (how original).
sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd,metrics=['accuracy'])

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255
if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(X_train, Y_train, batch_size=batch_size,
              nb_epoch=nb_epoch, show_accuracy=True,
              validation_data=(X_test, Y_test), shuffle=True)
else:
    print('Using real-time data augmentation.')
    # this will do preprocessing and realtime data augmentation
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=True)  # randomly flip images

    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    datagen.fit(X_train)

    # fit the model on the batches generated by datagen.flow()
    model.fit_generator(datagen.flow(X_train, Y_train, batch_size=batch_size),
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=nb_epoch, show_accuracy=True,
                        validation_data=(X_test, Y_test),
                        nb_worker=1)

model.save_weights("weights30epochs")
embed()
X_test1 = []
for i in range(1,300001):
  file = "../test/"+str(i)+".png"
  x = si.imread(file)
  X_test1.append(x.T)
  if i % 5000 == 0:
    print("Reading data for index = ", i)

X_test1 = np.asarray(X_test1)
X_test1 = X_test1.astype('float32')
X_test1 /= 255

print('X_test1 shape:', X_test1.shape)

y_pred = model.predict_classes(X_test1, batch_size=128, verbose=1)
#print(y_pred)
y_pred = np.asarray(y_pred)
y_class = [class_inverted[row] for row in y_pred]
out = pd.DataFrame(y_class)
out.index += 1
out.to_csv('out1.csv')
